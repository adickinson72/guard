[tool.poetry]
name = "guard"
version = "0.2.0"
description = "GUARD - GitOps Upgrade Automation with Rollback Detection for Kubernetes services"
authors = ["Platform Engineering Team <platform@company.com>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/your-org/guard"
repository = "https://github.com/your-org/guard"
documentation = "https://github.com/your-org/guard/docs"
keywords = ["gitops", "kubernetes", "eks", "automation", "upgrades", "deployment", "rollback"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
]
packages = [{include = "guard", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
click = "^8.1.7"
boto3 = "^1.34.0"
kubernetes = "^29.0.0"
python-gitlab = "^4.4.0"
datadog-api-client = "^2.23.0"
pyyaml = "^6.0.1"
pydantic = "^2.6.0"
pydantic-settings = "^2.2.0"
rich = "^13.7.0"
tenacity = "^8.2.3"
structlog = "^24.1.0"
httpx = "^0.27.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.23.0"
pytest-xdist = "^3.5.0"
mypy = "^1.8.0"
ruff = "^0.2.0"
pre-commit = "^3.6.0"
ipython = "^8.21.0"
boto3-stubs = {extras = ["dynamodb", "secretsmanager", "sts", "eks"], version = "^1.34.0"}
types-pyyaml = "^6.0.12"

[tool.poetry.scripts]
guard = "guard.cli.main:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ==============================================================================
# Ruff Configuration
# ==============================================================================
[tool.ruff]
target-version = "py311"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "W191",   # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = [
    "ARG",    # Allow unused arguments in tests
    "S101",   # Allow assert in tests
]

[tool.ruff.lint.isort]
known-first-party = ["guard"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ==============================================================================
# MyPy Configuration
# ==============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "kubernetes.*",
    "gitlab.*",
    "datadog_api_client.*",
]
ignore_missing_imports = true

# ==============================================================================
# Pytest Configuration
# ==============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",                    # Show summary of all test outcomes
    "--strict-markers",       # Ensure markers are defined
    "--strict-config",        # Ensure config is correct
    "--showlocals",           # Show local variables in tracebacks
    "-v",                     # Verbose output
    "--cov=guard",            # Coverage for src/guard
    "--cov-report=term-missing:skip-covered",  # Show missing lines
    "--cov-report=html",      # Generate HTML coverage report
    "--cov-fail-under=90",    # Fail if coverage < 90%
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "requires_aws: marks tests that require AWS access",
    "requires_k8s: marks tests that require Kubernetes access",
    "requires_gitlab: marks tests that require GitLab access",
    "requires_datadog: marks tests that require Datadog access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# ==============================================================================
# Coverage Configuration
# ==============================================================================
[tool.coverage.run]
source = ["src/guard"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 90

[tool.coverage.html]
directory = "htmlcov"
